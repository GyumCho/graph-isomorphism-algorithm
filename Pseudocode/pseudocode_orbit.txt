PS
solutionSet
toProcessSet

solutionSet = PS

results = []

for i in stabilizer:
    inner = [i]
    temp = i
    while True:
        temp = temp * i
        if temp is trivial permutation:
            break
        list1.add(temp)

# at this point we have lists for each element in the stabilizer
# each list has all possible permutations generated by each item

for element in itertools.product(*somelists):
    print(element)

    orbit = None
    if len(ps) == 1:  # just trivial mapping in automorphism generating set
        return 1
    el = FindNonTrivialOrbit(ps)
    orbit, traversal = Orbit(ps, el, True)
    # for index, vertex in enumerate(g.vertices):
    #     orbit, traversal = Orbit(ps, index, True)
    #     if len(orbit) >= 2:
    #         el = index
    #         break

    stabilizer = Stabilizer(ps, el)
    results = []

    if len(stabilizer) == 0:
        stabilizer.append(permutation(len(g.vertices)))  # add trivial permutation
    else:
        for i in stabilizer:
            inner = [i]
            temp = i
            while True:
                temp = temp * i
                inner.append(temp)
                if temp.istrivial():
                    break
            results.append(inner)

    output = set()

    for element in product(*results):
        # print(element)
        if len(element) == 0:
            continue
        final = element[0]
        final2 = element[0]
        for i in range(len(element) - 1):
            final = final * element[i + 1]
            final2 = element[i+1] * final

        # print(final)
        output.add(str(final))
        output.add(str(final2))
        output.add(str(-final))
        output.add(str(-final2))
    # print(output)
    print(len(output))
    print(len(orbit))
    return len(output) * len(orbit)
